module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMovie {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateScrapedmovie {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Movie {
  id: ID!
  createdAt: DateTime!
  movies(where: ScrapedmovieWhereInput, orderBy: ScrapedmovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scrapedmovie!]
}

type MovieConnection {
  pageInfo: PageInfo!
  edges: [MovieEdge]!
  aggregate: AggregateMovie!
}

input MovieCreateInput {
  id: ID
  movies: ScrapedmovieCreateManyInput
}

type MovieEdge {
  node: Movie!
  cursor: String!
}

enum MovieOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type MoviePreviousValues {
  id: ID!
  createdAt: DateTime!
}

type MovieSubscriptionPayload {
  mutation: MutationType!
  node: Movie
  updatedFields: [String!]
  previousValues: MoviePreviousValues
}

input MovieSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MovieWhereInput
  AND: [MovieSubscriptionWhereInput!]
  OR: [MovieSubscriptionWhereInput!]
  NOT: [MovieSubscriptionWhereInput!]
}

input MovieUpdateInput {
  movies: ScrapedmovieUpdateManyInput
}

input MovieWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  movies_every: ScrapedmovieWhereInput
  movies_some: ScrapedmovieWhereInput
  movies_none: ScrapedmovieWhereInput
  AND: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
}

input MovieWhereUniqueInput {
  id: ID
}

type Mutation {
  createMovie(data: MovieCreateInput!): Movie!
  updateMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
  upsertMovie(where: MovieWhereUniqueInput!, create: MovieCreateInput!, update: MovieUpdateInput!): Movie!
  deleteMovie(where: MovieWhereUniqueInput!): Movie
  deleteManyMovies(where: MovieWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createScrapedmovie(data: ScrapedmovieCreateInput!): Scrapedmovie!
  updateScrapedmovie(data: ScrapedmovieUpdateInput!, where: ScrapedmovieWhereUniqueInput!): Scrapedmovie
  updateManyScrapedmovies(data: ScrapedmovieUpdateManyMutationInput!, where: ScrapedmovieWhereInput): BatchPayload!
  upsertScrapedmovie(where: ScrapedmovieWhereUniqueInput!, create: ScrapedmovieCreateInput!, update: ScrapedmovieUpdateInput!): Scrapedmovie!
  deleteScrapedmovie(where: ScrapedmovieWhereUniqueInput!): Scrapedmovie
  deleteManyScrapedmovies(where: ScrapedmovieWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  body: String!
  createdAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  body: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  body: String!
  createdAt: DateTime!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  body: String
}

input PostUpdateManyMutationInput {
  title: String
  body: String
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  movie(where: MovieWhereUniqueInput!): Movie
  movies(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movie]!
  moviesConnection(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MovieConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  scrapedmovie(where: ScrapedmovieWhereUniqueInput!): Scrapedmovie
  scrapedmovies(where: ScrapedmovieWhereInput, orderBy: ScrapedmovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scrapedmovie]!
  scrapedmoviesConnection(where: ScrapedmovieWhereInput, orderBy: ScrapedmovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScrapedmovieConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Scrapedmovie {
  id: ID!
  imgUrl: String!
  title: String!
  rate: Float!
  genres: String!
  advanceRate: String!
  directors: String!
  actors: String!
}

type ScrapedmovieConnection {
  pageInfo: PageInfo!
  edges: [ScrapedmovieEdge]!
  aggregate: AggregateScrapedmovie!
}

input ScrapedmovieCreateInput {
  id: ID
  imgUrl: String!
  title: String!
  rate: Float!
  genres: String!
  advanceRate: String!
  directors: String!
  actors: String!
}

input ScrapedmovieCreateManyInput {
  create: [ScrapedmovieCreateInput!]
  connect: [ScrapedmovieWhereUniqueInput!]
}

type ScrapedmovieEdge {
  node: Scrapedmovie!
  cursor: String!
}

enum ScrapedmovieOrderByInput {
  id_ASC
  id_DESC
  imgUrl_ASC
  imgUrl_DESC
  title_ASC
  title_DESC
  rate_ASC
  rate_DESC
  genres_ASC
  genres_DESC
  advanceRate_ASC
  advanceRate_DESC
  directors_ASC
  directors_DESC
  actors_ASC
  actors_DESC
}

type ScrapedmoviePreviousValues {
  id: ID!
  imgUrl: String!
  title: String!
  rate: Float!
  genres: String!
  advanceRate: String!
  directors: String!
  actors: String!
}

input ScrapedmovieScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imgUrl: String
  imgUrl_not: String
  imgUrl_in: [String!]
  imgUrl_not_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_contains: String
  imgUrl_not_contains: String
  imgUrl_starts_with: String
  imgUrl_not_starts_with: String
  imgUrl_ends_with: String
  imgUrl_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  rate: Float
  rate_not: Float
  rate_in: [Float!]
  rate_not_in: [Float!]
  rate_lt: Float
  rate_lte: Float
  rate_gt: Float
  rate_gte: Float
  genres: String
  genres_not: String
  genres_in: [String!]
  genres_not_in: [String!]
  genres_lt: String
  genres_lte: String
  genres_gt: String
  genres_gte: String
  genres_contains: String
  genres_not_contains: String
  genres_starts_with: String
  genres_not_starts_with: String
  genres_ends_with: String
  genres_not_ends_with: String
  advanceRate: String
  advanceRate_not: String
  advanceRate_in: [String!]
  advanceRate_not_in: [String!]
  advanceRate_lt: String
  advanceRate_lte: String
  advanceRate_gt: String
  advanceRate_gte: String
  advanceRate_contains: String
  advanceRate_not_contains: String
  advanceRate_starts_with: String
  advanceRate_not_starts_with: String
  advanceRate_ends_with: String
  advanceRate_not_ends_with: String
  directors: String
  directors_not: String
  directors_in: [String!]
  directors_not_in: [String!]
  directors_lt: String
  directors_lte: String
  directors_gt: String
  directors_gte: String
  directors_contains: String
  directors_not_contains: String
  directors_starts_with: String
  directors_not_starts_with: String
  directors_ends_with: String
  directors_not_ends_with: String
  actors: String
  actors_not: String
  actors_in: [String!]
  actors_not_in: [String!]
  actors_lt: String
  actors_lte: String
  actors_gt: String
  actors_gte: String
  actors_contains: String
  actors_not_contains: String
  actors_starts_with: String
  actors_not_starts_with: String
  actors_ends_with: String
  actors_not_ends_with: String
  AND: [ScrapedmovieScalarWhereInput!]
  OR: [ScrapedmovieScalarWhereInput!]
  NOT: [ScrapedmovieScalarWhereInput!]
}

type ScrapedmovieSubscriptionPayload {
  mutation: MutationType!
  node: Scrapedmovie
  updatedFields: [String!]
  previousValues: ScrapedmoviePreviousValues
}

input ScrapedmovieSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ScrapedmovieWhereInput
  AND: [ScrapedmovieSubscriptionWhereInput!]
  OR: [ScrapedmovieSubscriptionWhereInput!]
  NOT: [ScrapedmovieSubscriptionWhereInput!]
}

input ScrapedmovieUpdateDataInput {
  imgUrl: String
  title: String
  rate: Float
  genres: String
  advanceRate: String
  directors: String
  actors: String
}

input ScrapedmovieUpdateInput {
  imgUrl: String
  title: String
  rate: Float
  genres: String
  advanceRate: String
  directors: String
  actors: String
}

input ScrapedmovieUpdateManyDataInput {
  imgUrl: String
  title: String
  rate: Float
  genres: String
  advanceRate: String
  directors: String
  actors: String
}

input ScrapedmovieUpdateManyInput {
  create: [ScrapedmovieCreateInput!]
  update: [ScrapedmovieUpdateWithWhereUniqueNestedInput!]
  upsert: [ScrapedmovieUpsertWithWhereUniqueNestedInput!]
  delete: [ScrapedmovieWhereUniqueInput!]
  connect: [ScrapedmovieWhereUniqueInput!]
  set: [ScrapedmovieWhereUniqueInput!]
  disconnect: [ScrapedmovieWhereUniqueInput!]
  deleteMany: [ScrapedmovieScalarWhereInput!]
  updateMany: [ScrapedmovieUpdateManyWithWhereNestedInput!]
}

input ScrapedmovieUpdateManyMutationInput {
  imgUrl: String
  title: String
  rate: Float
  genres: String
  advanceRate: String
  directors: String
  actors: String
}

input ScrapedmovieUpdateManyWithWhereNestedInput {
  where: ScrapedmovieScalarWhereInput!
  data: ScrapedmovieUpdateManyDataInput!
}

input ScrapedmovieUpdateWithWhereUniqueNestedInput {
  where: ScrapedmovieWhereUniqueInput!
  data: ScrapedmovieUpdateDataInput!
}

input ScrapedmovieUpsertWithWhereUniqueNestedInput {
  where: ScrapedmovieWhereUniqueInput!
  update: ScrapedmovieUpdateDataInput!
  create: ScrapedmovieCreateInput!
}

input ScrapedmovieWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imgUrl: String
  imgUrl_not: String
  imgUrl_in: [String!]
  imgUrl_not_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_contains: String
  imgUrl_not_contains: String
  imgUrl_starts_with: String
  imgUrl_not_starts_with: String
  imgUrl_ends_with: String
  imgUrl_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  rate: Float
  rate_not: Float
  rate_in: [Float!]
  rate_not_in: [Float!]
  rate_lt: Float
  rate_lte: Float
  rate_gt: Float
  rate_gte: Float
  genres: String
  genres_not: String
  genres_in: [String!]
  genres_not_in: [String!]
  genres_lt: String
  genres_lte: String
  genres_gt: String
  genres_gte: String
  genres_contains: String
  genres_not_contains: String
  genres_starts_with: String
  genres_not_starts_with: String
  genres_ends_with: String
  genres_not_ends_with: String
  advanceRate: String
  advanceRate_not: String
  advanceRate_in: [String!]
  advanceRate_not_in: [String!]
  advanceRate_lt: String
  advanceRate_lte: String
  advanceRate_gt: String
  advanceRate_gte: String
  advanceRate_contains: String
  advanceRate_not_contains: String
  advanceRate_starts_with: String
  advanceRate_not_starts_with: String
  advanceRate_ends_with: String
  advanceRate_not_ends_with: String
  directors: String
  directors_not: String
  directors_in: [String!]
  directors_not_in: [String!]
  directors_lt: String
  directors_lte: String
  directors_gt: String
  directors_gte: String
  directors_contains: String
  directors_not_contains: String
  directors_starts_with: String
  directors_not_starts_with: String
  directors_ends_with: String
  directors_not_ends_with: String
  actors: String
  actors_not: String
  actors_in: [String!]
  actors_not_in: [String!]
  actors_lt: String
  actors_lte: String
  actors_gt: String
  actors_gte: String
  actors_contains: String
  actors_not_contains: String
  actors_starts_with: String
  actors_not_starts_with: String
  actors_ends_with: String
  actors_not_ends_with: String
  AND: [ScrapedmovieWhereInput!]
  OR: [ScrapedmovieWhereInput!]
  NOT: [ScrapedmovieWhereInput!]
}

input ScrapedmovieWhereUniqueInput {
  id: ID
}

type Subscription {
  movie(where: MovieSubscriptionWhereInput): MovieSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  scrapedmovie(where: ScrapedmovieSubscriptionWhereInput): ScrapedmovieSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    