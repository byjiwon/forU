// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  movie: (where?: MovieWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  scrapedmovie: (where?: ScrapedmovieWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  movie: (where: MovieWhereUniqueInput) => MovieNullablePromise;
  movies: (args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Movie>;
  moviesConnection: (args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MovieConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  scrapedmovie: (
    where: ScrapedmovieWhereUniqueInput
  ) => ScrapedmovieNullablePromise;
  scrapedmovies: (args?: {
    where?: ScrapedmovieWhereInput;
    orderBy?: ScrapedmovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Scrapedmovie>;
  scrapedmoviesConnection: (args?: {
    where?: ScrapedmovieWhereInput;
    orderBy?: ScrapedmovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ScrapedmovieConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMovie: (data: MovieCreateInput) => MoviePromise;
  updateMovie: (args: {
    data: MovieUpdateInput;
    where: MovieWhereUniqueInput;
  }) => MoviePromise;
  upsertMovie: (args: {
    where: MovieWhereUniqueInput;
    create: MovieCreateInput;
    update: MovieUpdateInput;
  }) => MoviePromise;
  deleteMovie: (where: MovieWhereUniqueInput) => MoviePromise;
  deleteManyMovies: (where?: MovieWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createScrapedmovie: (data: ScrapedmovieCreateInput) => ScrapedmoviePromise;
  updateScrapedmovie: (args: {
    data: ScrapedmovieUpdateInput;
    where: ScrapedmovieWhereUniqueInput;
  }) => ScrapedmoviePromise;
  updateManyScrapedmovies: (args: {
    data: ScrapedmovieUpdateManyMutationInput;
    where?: ScrapedmovieWhereInput;
  }) => BatchPayloadPromise;
  upsertScrapedmovie: (args: {
    where: ScrapedmovieWhereUniqueInput;
    create: ScrapedmovieCreateInput;
    update: ScrapedmovieUpdateInput;
  }) => ScrapedmoviePromise;
  deleteScrapedmovie: (
    where: ScrapedmovieWhereUniqueInput
  ) => ScrapedmoviePromise;
  deleteManyScrapedmovies: (
    where?: ScrapedmovieWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  movie: (
    where?: MovieSubscriptionWhereInput
  ) => MovieSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  scrapedmovie: (
    where?: ScrapedmovieSubscriptionWhereInput
  ) => ScrapedmovieSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ScrapedmovieOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "imgUrl_ASC"
  | "imgUrl_DESC"
  | "title_ASC"
  | "title_DESC"
  | "rate_ASC"
  | "rate_DESC"
  | "genres_ASC"
  | "genres_DESC"
  | "advanceRate_ASC"
  | "advanceRate_DESC"
  | "directors_ASC"
  | "directors_DESC"
  | "actors_ASC"
  | "actors_DESC";

export type MovieOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "body_ASC"
  | "body_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type MovieWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ScrapedmovieWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  imgUrl?: Maybe<String>;
  imgUrl_not?: Maybe<String>;
  imgUrl_in?: Maybe<String[] | String>;
  imgUrl_not_in?: Maybe<String[] | String>;
  imgUrl_lt?: Maybe<String>;
  imgUrl_lte?: Maybe<String>;
  imgUrl_gt?: Maybe<String>;
  imgUrl_gte?: Maybe<String>;
  imgUrl_contains?: Maybe<String>;
  imgUrl_not_contains?: Maybe<String>;
  imgUrl_starts_with?: Maybe<String>;
  imgUrl_not_starts_with?: Maybe<String>;
  imgUrl_ends_with?: Maybe<String>;
  imgUrl_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  rate?: Maybe<Float>;
  rate_not?: Maybe<Float>;
  rate_in?: Maybe<Float[] | Float>;
  rate_not_in?: Maybe<Float[] | Float>;
  rate_lt?: Maybe<Float>;
  rate_lte?: Maybe<Float>;
  rate_gt?: Maybe<Float>;
  rate_gte?: Maybe<Float>;
  genres?: Maybe<String>;
  genres_not?: Maybe<String>;
  genres_in?: Maybe<String[] | String>;
  genres_not_in?: Maybe<String[] | String>;
  genres_lt?: Maybe<String>;
  genres_lte?: Maybe<String>;
  genres_gt?: Maybe<String>;
  genres_gte?: Maybe<String>;
  genres_contains?: Maybe<String>;
  genres_not_contains?: Maybe<String>;
  genres_starts_with?: Maybe<String>;
  genres_not_starts_with?: Maybe<String>;
  genres_ends_with?: Maybe<String>;
  genres_not_ends_with?: Maybe<String>;
  advanceRate?: Maybe<String>;
  advanceRate_not?: Maybe<String>;
  advanceRate_in?: Maybe<String[] | String>;
  advanceRate_not_in?: Maybe<String[] | String>;
  advanceRate_lt?: Maybe<String>;
  advanceRate_lte?: Maybe<String>;
  advanceRate_gt?: Maybe<String>;
  advanceRate_gte?: Maybe<String>;
  advanceRate_contains?: Maybe<String>;
  advanceRate_not_contains?: Maybe<String>;
  advanceRate_starts_with?: Maybe<String>;
  advanceRate_not_starts_with?: Maybe<String>;
  advanceRate_ends_with?: Maybe<String>;
  advanceRate_not_ends_with?: Maybe<String>;
  directors?: Maybe<String>;
  directors_not?: Maybe<String>;
  directors_in?: Maybe<String[] | String>;
  directors_not_in?: Maybe<String[] | String>;
  directors_lt?: Maybe<String>;
  directors_lte?: Maybe<String>;
  directors_gt?: Maybe<String>;
  directors_gte?: Maybe<String>;
  directors_contains?: Maybe<String>;
  directors_not_contains?: Maybe<String>;
  directors_starts_with?: Maybe<String>;
  directors_not_starts_with?: Maybe<String>;
  directors_ends_with?: Maybe<String>;
  directors_not_ends_with?: Maybe<String>;
  actors?: Maybe<String>;
  actors_not?: Maybe<String>;
  actors_in?: Maybe<String[] | String>;
  actors_not_in?: Maybe<String[] | String>;
  actors_lt?: Maybe<String>;
  actors_lte?: Maybe<String>;
  actors_gt?: Maybe<String>;
  actors_gte?: Maybe<String>;
  actors_contains?: Maybe<String>;
  actors_not_contains?: Maybe<String>;
  actors_starts_with?: Maybe<String>;
  actors_not_starts_with?: Maybe<String>;
  actors_ends_with?: Maybe<String>;
  actors_not_ends_with?: Maybe<String>;
  AND?: Maybe<ScrapedmovieWhereInput[] | ScrapedmovieWhereInput>;
  OR?: Maybe<ScrapedmovieWhereInput[] | ScrapedmovieWhereInput>;
  NOT?: Maybe<ScrapedmovieWhereInput[] | ScrapedmovieWhereInput>;
}

export interface MovieWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  movies_every?: Maybe<ScrapedmovieWhereInput>;
  movies_some?: Maybe<ScrapedmovieWhereInput>;
  movies_none?: Maybe<ScrapedmovieWhereInput>;
  AND?: Maybe<MovieWhereInput[] | MovieWhereInput>;
  OR?: Maybe<MovieWhereInput[] | MovieWhereInput>;
  NOT?: Maybe<MovieWhereInput[] | MovieWhereInput>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export type ScrapedmovieWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface MovieCreateInput {
  id?: Maybe<ID_Input>;
  movies?: Maybe<ScrapedmovieCreateManyInput>;
}

export interface ScrapedmovieCreateManyInput {
  create?: Maybe<ScrapedmovieCreateInput[] | ScrapedmovieCreateInput>;
  connect?: Maybe<
    ScrapedmovieWhereUniqueInput[] | ScrapedmovieWhereUniqueInput
  >;
}

export interface ScrapedmovieCreateInput {
  id?: Maybe<ID_Input>;
  imgUrl: String;
  title: String;
  rate: Float;
  genres: String;
  advanceRate: String;
  directors: String;
  actors: String;
}

export interface MovieUpdateInput {
  movies?: Maybe<ScrapedmovieUpdateManyInput>;
}

export interface ScrapedmovieUpdateManyInput {
  create?: Maybe<ScrapedmovieCreateInput[] | ScrapedmovieCreateInput>;
  update?: Maybe<
    | ScrapedmovieUpdateWithWhereUniqueNestedInput[]
    | ScrapedmovieUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ScrapedmovieUpsertWithWhereUniqueNestedInput[]
    | ScrapedmovieUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ScrapedmovieWhereUniqueInput[] | ScrapedmovieWhereUniqueInput>;
  connect?: Maybe<
    ScrapedmovieWhereUniqueInput[] | ScrapedmovieWhereUniqueInput
  >;
  set?: Maybe<ScrapedmovieWhereUniqueInput[] | ScrapedmovieWhereUniqueInput>;
  disconnect?: Maybe<
    ScrapedmovieWhereUniqueInput[] | ScrapedmovieWhereUniqueInput
  >;
  deleteMany?: Maybe<
    ScrapedmovieScalarWhereInput[] | ScrapedmovieScalarWhereInput
  >;
  updateMany?: Maybe<
    | ScrapedmovieUpdateManyWithWhereNestedInput[]
    | ScrapedmovieUpdateManyWithWhereNestedInput
  >;
}

export interface ScrapedmovieUpdateWithWhereUniqueNestedInput {
  where: ScrapedmovieWhereUniqueInput;
  data: ScrapedmovieUpdateDataInput;
}

export interface ScrapedmovieUpdateDataInput {
  imgUrl?: Maybe<String>;
  title?: Maybe<String>;
  rate?: Maybe<Float>;
  genres?: Maybe<String>;
  advanceRate?: Maybe<String>;
  directors?: Maybe<String>;
  actors?: Maybe<String>;
}

export interface ScrapedmovieUpsertWithWhereUniqueNestedInput {
  where: ScrapedmovieWhereUniqueInput;
  update: ScrapedmovieUpdateDataInput;
  create: ScrapedmovieCreateInput;
}

export interface ScrapedmovieScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  imgUrl?: Maybe<String>;
  imgUrl_not?: Maybe<String>;
  imgUrl_in?: Maybe<String[] | String>;
  imgUrl_not_in?: Maybe<String[] | String>;
  imgUrl_lt?: Maybe<String>;
  imgUrl_lte?: Maybe<String>;
  imgUrl_gt?: Maybe<String>;
  imgUrl_gte?: Maybe<String>;
  imgUrl_contains?: Maybe<String>;
  imgUrl_not_contains?: Maybe<String>;
  imgUrl_starts_with?: Maybe<String>;
  imgUrl_not_starts_with?: Maybe<String>;
  imgUrl_ends_with?: Maybe<String>;
  imgUrl_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  rate?: Maybe<Float>;
  rate_not?: Maybe<Float>;
  rate_in?: Maybe<Float[] | Float>;
  rate_not_in?: Maybe<Float[] | Float>;
  rate_lt?: Maybe<Float>;
  rate_lte?: Maybe<Float>;
  rate_gt?: Maybe<Float>;
  rate_gte?: Maybe<Float>;
  genres?: Maybe<String>;
  genres_not?: Maybe<String>;
  genres_in?: Maybe<String[] | String>;
  genres_not_in?: Maybe<String[] | String>;
  genres_lt?: Maybe<String>;
  genres_lte?: Maybe<String>;
  genres_gt?: Maybe<String>;
  genres_gte?: Maybe<String>;
  genres_contains?: Maybe<String>;
  genres_not_contains?: Maybe<String>;
  genres_starts_with?: Maybe<String>;
  genres_not_starts_with?: Maybe<String>;
  genres_ends_with?: Maybe<String>;
  genres_not_ends_with?: Maybe<String>;
  advanceRate?: Maybe<String>;
  advanceRate_not?: Maybe<String>;
  advanceRate_in?: Maybe<String[] | String>;
  advanceRate_not_in?: Maybe<String[] | String>;
  advanceRate_lt?: Maybe<String>;
  advanceRate_lte?: Maybe<String>;
  advanceRate_gt?: Maybe<String>;
  advanceRate_gte?: Maybe<String>;
  advanceRate_contains?: Maybe<String>;
  advanceRate_not_contains?: Maybe<String>;
  advanceRate_starts_with?: Maybe<String>;
  advanceRate_not_starts_with?: Maybe<String>;
  advanceRate_ends_with?: Maybe<String>;
  advanceRate_not_ends_with?: Maybe<String>;
  directors?: Maybe<String>;
  directors_not?: Maybe<String>;
  directors_in?: Maybe<String[] | String>;
  directors_not_in?: Maybe<String[] | String>;
  directors_lt?: Maybe<String>;
  directors_lte?: Maybe<String>;
  directors_gt?: Maybe<String>;
  directors_gte?: Maybe<String>;
  directors_contains?: Maybe<String>;
  directors_not_contains?: Maybe<String>;
  directors_starts_with?: Maybe<String>;
  directors_not_starts_with?: Maybe<String>;
  directors_ends_with?: Maybe<String>;
  directors_not_ends_with?: Maybe<String>;
  actors?: Maybe<String>;
  actors_not?: Maybe<String>;
  actors_in?: Maybe<String[] | String>;
  actors_not_in?: Maybe<String[] | String>;
  actors_lt?: Maybe<String>;
  actors_lte?: Maybe<String>;
  actors_gt?: Maybe<String>;
  actors_gte?: Maybe<String>;
  actors_contains?: Maybe<String>;
  actors_not_contains?: Maybe<String>;
  actors_starts_with?: Maybe<String>;
  actors_not_starts_with?: Maybe<String>;
  actors_ends_with?: Maybe<String>;
  actors_not_ends_with?: Maybe<String>;
  AND?: Maybe<ScrapedmovieScalarWhereInput[] | ScrapedmovieScalarWhereInput>;
  OR?: Maybe<ScrapedmovieScalarWhereInput[] | ScrapedmovieScalarWhereInput>;
  NOT?: Maybe<ScrapedmovieScalarWhereInput[] | ScrapedmovieScalarWhereInput>;
}

export interface ScrapedmovieUpdateManyWithWhereNestedInput {
  where: ScrapedmovieScalarWhereInput;
  data: ScrapedmovieUpdateManyDataInput;
}

export interface ScrapedmovieUpdateManyDataInput {
  imgUrl?: Maybe<String>;
  title?: Maybe<String>;
  rate?: Maybe<Float>;
  genres?: Maybe<String>;
  advanceRate?: Maybe<String>;
  directors?: Maybe<String>;
  actors?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
}

export interface ScrapedmovieUpdateInput {
  imgUrl?: Maybe<String>;
  title?: Maybe<String>;
  rate?: Maybe<Float>;
  genres?: Maybe<String>;
  advanceRate?: Maybe<String>;
  directors?: Maybe<String>;
  actors?: Maybe<String>;
}

export interface ScrapedmovieUpdateManyMutationInput {
  imgUrl?: Maybe<String>;
  title?: Maybe<String>;
  rate?: Maybe<Float>;
  genres?: Maybe<String>;
  advanceRate?: Maybe<String>;
  directors?: Maybe<String>;
  actors?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  password: String;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export interface MovieSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MovieWhereInput>;
  AND?: Maybe<MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput>;
  OR?: Maybe<MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput>;
  NOT?: Maybe<MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface ScrapedmovieSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ScrapedmovieWhereInput>;
  AND?: Maybe<
    ScrapedmovieSubscriptionWhereInput[] | ScrapedmovieSubscriptionWhereInput
  >;
  OR?: Maybe<
    ScrapedmovieSubscriptionWhereInput[] | ScrapedmovieSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ScrapedmovieSubscriptionWhereInput[] | ScrapedmovieSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Movie {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface MoviePromise extends Promise<Movie>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  movies: <T = FragmentableArray<Scrapedmovie>>(args?: {
    where?: ScrapedmovieWhereInput;
    orderBy?: ScrapedmovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MovieSubscription
  extends Promise<AsyncIterator<Movie>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  movies: <T = Promise<AsyncIterator<ScrapedmovieSubscription>>>(args?: {
    where?: ScrapedmovieWhereInput;
    orderBy?: ScrapedmovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MovieNullablePromise
  extends Promise<Movie | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  movies: <T = FragmentableArray<Scrapedmovie>>(args?: {
    where?: ScrapedmovieWhereInput;
    orderBy?: ScrapedmovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Scrapedmovie {
  id: ID_Output;
  imgUrl: String;
  title: String;
  rate: Float;
  genres: String;
  advanceRate: String;
  directors: String;
  actors: String;
}

export interface ScrapedmoviePromise
  extends Promise<Scrapedmovie>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  imgUrl: () => Promise<String>;
  title: () => Promise<String>;
  rate: () => Promise<Float>;
  genres: () => Promise<String>;
  advanceRate: () => Promise<String>;
  directors: () => Promise<String>;
  actors: () => Promise<String>;
}

export interface ScrapedmovieSubscription
  extends Promise<AsyncIterator<Scrapedmovie>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  imgUrl: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  rate: () => Promise<AsyncIterator<Float>>;
  genres: () => Promise<AsyncIterator<String>>;
  advanceRate: () => Promise<AsyncIterator<String>>;
  directors: () => Promise<AsyncIterator<String>>;
  actors: () => Promise<AsyncIterator<String>>;
}

export interface ScrapedmovieNullablePromise
  extends Promise<Scrapedmovie | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  imgUrl: () => Promise<String>;
  title: () => Promise<String>;
  rate: () => Promise<Float>;
  genres: () => Promise<String>;
  advanceRate: () => Promise<String>;
  directors: () => Promise<String>;
  actors: () => Promise<String>;
}

export interface MovieConnection {
  pageInfo: PageInfo;
  edges: MovieEdge[];
}

export interface MovieConnectionPromise
  extends Promise<MovieConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MovieEdge>>() => T;
  aggregate: <T = AggregateMoviePromise>() => T;
}

export interface MovieConnectionSubscription
  extends Promise<AsyncIterator<MovieConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MovieEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMovieSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface MovieEdge {
  node: Movie;
  cursor: String;
}

export interface MovieEdgePromise extends Promise<MovieEdge>, Fragmentable {
  node: <T = MoviePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MovieEdgeSubscription
  extends Promise<AsyncIterator<MovieEdge>>,
    Fragmentable {
  node: <T = MovieSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMovie {
  count: Int;
}

export interface AggregateMoviePromise
  extends Promise<AggregateMovie>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMovieSubscription
  extends Promise<AsyncIterator<AggregateMovie>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  title: String;
  body: String;
  createdAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ScrapedmovieConnection {
  pageInfo: PageInfo;
  edges: ScrapedmovieEdge[];
}

export interface ScrapedmovieConnectionPromise
  extends Promise<ScrapedmovieConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScrapedmovieEdge>>() => T;
  aggregate: <T = AggregateScrapedmoviePromise>() => T;
}

export interface ScrapedmovieConnectionSubscription
  extends Promise<AsyncIterator<ScrapedmovieConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScrapedmovieEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScrapedmovieSubscription>() => T;
}

export interface ScrapedmovieEdge {
  node: Scrapedmovie;
  cursor: String;
}

export interface ScrapedmovieEdgePromise
  extends Promise<ScrapedmovieEdge>,
    Fragmentable {
  node: <T = ScrapedmoviePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScrapedmovieEdgeSubscription
  extends Promise<AsyncIterator<ScrapedmovieEdge>>,
    Fragmentable {
  node: <T = ScrapedmovieSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateScrapedmovie {
  count: Int;
}

export interface AggregateScrapedmoviePromise
  extends Promise<AggregateScrapedmovie>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScrapedmovieSubscription
  extends Promise<AsyncIterator<AggregateScrapedmovie>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface MovieSubscriptionPayload {
  mutation: MutationType;
  node: Movie;
  updatedFields: String[];
  previousValues: MoviePreviousValues;
}

export interface MovieSubscriptionPayloadPromise
  extends Promise<MovieSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MoviePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MoviePreviousValuesPromise>() => T;
}

export interface MovieSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MovieSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MovieSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MoviePreviousValuesSubscription>() => T;
}

export interface MoviePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface MoviePreviousValuesPromise
  extends Promise<MoviePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface MoviePreviousValuesSubscription
  extends Promise<AsyncIterator<MoviePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  body: String;
  createdAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ScrapedmovieSubscriptionPayload {
  mutation: MutationType;
  node: Scrapedmovie;
  updatedFields: String[];
  previousValues: ScrapedmoviePreviousValues;
}

export interface ScrapedmovieSubscriptionPayloadPromise
  extends Promise<ScrapedmovieSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ScrapedmoviePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ScrapedmoviePreviousValuesPromise>() => T;
}

export interface ScrapedmovieSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScrapedmovieSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScrapedmovieSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ScrapedmoviePreviousValuesSubscription>() => T;
}

export interface ScrapedmoviePreviousValues {
  id: ID_Output;
  imgUrl: String;
  title: String;
  rate: Float;
  genres: String;
  advanceRate: String;
  directors: String;
  actors: String;
}

export interface ScrapedmoviePreviousValuesPromise
  extends Promise<ScrapedmoviePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  imgUrl: () => Promise<String>;
  title: () => Promise<String>;
  rate: () => Promise<Float>;
  genres: () => Promise<String>;
  advanceRate: () => Promise<String>;
  directors: () => Promise<String>;
  actors: () => Promise<String>;
}

export interface ScrapedmoviePreviousValuesSubscription
  extends Promise<AsyncIterator<ScrapedmoviePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  imgUrl: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  rate: () => Promise<AsyncIterator<Float>>;
  genres: () => Promise<AsyncIterator<String>>;
  advanceRate: () => Promise<AsyncIterator<String>>;
  directors: () => Promise<AsyncIterator<String>>;
  actors: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Movie",
    embedded: false
  },
  {
    name: "Scrapedmovie",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
